name: Deploy to MS AI Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create backup
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          sudo mkdir -p /var/backups/msai &&
          sudo cp -r /var/www/msai /var/backups/msai/backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
        "
        
    - name: Create deployment directory
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo mkdir -p /var/www/msai"
        
    - name: Sync files to server
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          --exclude='.env' \
          --exclude='test_*.py' \
          --exclude='playwright_env' \
          --exclude='test_results.json' \
          --exclude='deploy.sh' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/msai/
          
    - name: Set proper permissions
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          sudo chmod -R 755 /var/www/msai &&
          sudo chown -R www-data:www-data /var/www/msai
        "
        
    - name: Restart web server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo systemctl reload nginx"
        
    - name: Wait for server restart
      run: sleep 10
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        for i in {1..5}; do
          if curl -f -s http://msai.syzygyx.com > /dev/null; then
            echo "✅ Site is responding successfully!"
            break
          else
            echo "⏳ Attempt $i/5: Waiting for site to respond..."
            sleep 10
          fi
        done
        
        # Final verification
        if curl -f -s http://msai.syzygyx.com > /dev/null; then
          echo "🎉 Deployment successful!"
          echo "🌐 Site is live at: http://msai.syzygyx.com"
          echo "📋 Application form: http://msai.syzygyx.com/apply"
        else
          echo "❌ Deployment verification failed!"
          echo "🔍 Checking server status..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo systemctl status nginx"
          exit 1
        fi
        
    - name: Run health check
      run: |
        echo "🏥 Running health check..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://msai.syzygyx.com)
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed (HTTP $response)"
        else
          echo "⚠️ Health check warning (HTTP $response)"
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed!"
        fi